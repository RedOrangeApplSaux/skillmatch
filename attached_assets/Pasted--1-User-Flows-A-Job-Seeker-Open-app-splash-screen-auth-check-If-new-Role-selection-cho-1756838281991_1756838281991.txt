🔹 1. User Flows
A. Job Seeker

Open app → splash screen → auth check

If new:

Role selection → choose “Job Seeker”

Signup form → create account → add basics (email, password, location)

Prompt to upload resume + add skills → profile completion widget

Dashboard:

Personalized job feed (recommendations by skills/location)

Widgets: Applications, Saved Jobs, Salary Insights, Events

Profile Completion reminder if <80%

Interactions:

Click job → job detail page → Apply Now

Save job → stored in saved_jobs table

Track application status in Applications widget (progress bar)

Notifications:

Job match alerts

Application updates

Event reminders

B. Employer / Recruiter

Open app → splash screen → auth check

If new:

Role selection → choose “Employer”

Signup form → company name, size, industry, location

Company profile completion widget

Dashboard:

Post Job button → job posting form

Recent Applicants widget

Active Job Listings

Interactions:

Post new job → saved to jobs table

Click job → see applicants → filter & view resumes

Update application stage → triggers seeker notification

Notifications:

New applicant alerts

Job expiring soon reminders

🔹 2. Data Models
Users Table

id (PK)

name

email (unique)

password (hashed)

role (job_seeker | employer)

created_at

Job Seekers Table

user_id (FK → users)

location

skills (array/json)

resume_url

profile_completion_score

Employers Table

user_id (FK → users)

company_name

company_size

industry

location

profile_completion_score

Jobs Table

id (PK)

employer_id (FK → employers)

title

description

requirements (json)

salary_range

location

created_at

Applications Table

id (PK)

job_id (FK → jobs)

seeker_id (FK → job_seekers)

status (applied | under_review | interview | offer | hired | rejected)

created_at

Events Table

id (PK)

title

description

date

location

Saved Jobs Table

id (PK)

seeker_id (FK → job_seekers)

job_id (FK → jobs)

🔹 3. App Logic

Authentication:

JWT-based auth (Supabase or Firebase).

Persistent login state.

Profile Completion:

Weight system (resume = 30%, skills = 20%, bio = 10%, etc.).

If score < 70% → force profile completion before applying.

Job Recommendation Logic:

Match jobs where skills overlap seeker skills.

Filter by location.

Prioritize newest + highest relevance.

Application Status Updates:

Employer updates status → seeker notified (in-app + email).

Progress bar widget updates dynamically.

Notifications:

Scheduled background jobs (cron) for reminders.

Real-time alerts via WebSocket / Supabase subscriptions.

Events Logic:

Events fetched from events table.

Seeker can register → entry created in event_registrations.

🔹 4. UI/UX Details
Universal

Font: Inter (main), Poppins (subtext).

Buttons: Rounded (radius 2xl), shadows soft.

Colors:

Primary CTA: #4CAF50 (green)

Complement: #E3FCD5 (soft green bg)

Neutral gray for inactive states

Job Seeker Dashboard

Top bar: Welcome + subtext

Main area: Job Feed

Right side widgets:

Profile Completion (big, 2x3 rectangle)

Applications Status (progress bar list)

Salary Insights (average salaries by skill)

Upcoming Events

Employer Dashboard

Top bar: Welcome + subtext

Main area: Active Jobs list + “Post Job” CTA

Right side widgets:

Recent Applicants

Expiring Job Posts

Company Profile Completion

Menus

Side menu hidden → rotates open (animation)

Job seeker: Dashboard, Applications, Saved Jobs, Profile, Settings

Employer: Dashboard, Post Job, Listings, Applicants, Settings

🔹 5. Integration Points

Supabase → Auth, Database, Realtime notifications.

AI Matching (Optional) → Vector search on skills/resume vs job descriptions.

File Storage → Resume uploads (Supabase Storage or S3).

Email Service → For confirmation + notifications (SendGrid/Postmark).